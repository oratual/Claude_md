# CLAUDE.md - Contexto Inicial

Este archivo proporciona el contexto esencial para Claude Code al trabajar en este entorno.

## üåç Entorno

- **Sistema**: Ubuntu WSL2 en Windows 11
- **Node**: v22.16.0 (via NVM)
- **Directorio base**: `~/glados`
- **Usuario**: lauta

## üîå MCPs Disponibles

| MCP | Funci√≥n |
|-----|---------|
| filesystem | Acceso completo a archivos |
| memory | Knowledge graph persistente |
| everything | B√∫squeda en Windows |
| sequentialthinking | Pensamiento estructurado |
| time | Operaciones de tiempo |
| fetch | Obtener contenido web |

## üõ†Ô∏è Herramientas Inmediatas

| Comando | Funci√≥n | Ejemplo |
|---------|---------|---------|
| `rg` | B√∫squeda de texto ultrarr√°pida | `rg "pattern" --type js` |
| `fd` | B√∫squeda moderna de archivos | `fd "*.tsx" src/` |
| `bat` | Cat con sintaxis highlighting | `bat file.js` |
| `check-tools` | Ver herramientas disponibles | `check-tools` |
| `search` | Wrapper inteligente de b√∫squeda | `search "TODO"` |
| `find-files` | Wrapper de b√∫squeda de archivos | `find-files "*.md"` |

**Lista completa de herramientas avanzadas**: Ver `~/glados/SECURITY_AND_TOOLS.md`

## üåê Conectividad WSL2/Windows

```bash
# Verificar conectividad y obtener IPs actuales
~/glados/scripts/check-connectivity.sh

# Estado de Tailscale
tailscale status
```

**Acceso a archivos Windows**: 
- Windows ‚Üí WSL: `C:\folder\file` ‚Üí `/mnt/c/folder/file`
- WSL ‚Üí Windows: `/home/user/file` ‚Üí `\\wsl.localhost\Ubuntu\home\user\file`

## üìÅ Estructura de Directorios Clave

```
~/glados/
‚îú‚îÄ‚îÄ scripts/           # Utilidades diarias
‚îú‚îÄ‚îÄ batman/            # Automatizaci√≥n nocturna y orquestaci√≥n
‚îú‚îÄ‚îÄ DiskDominator/     # Proyecto Next.js para gesti√≥n de discos
‚îú‚îÄ‚îÄ MPC/               # Configuraciones y servidores MCP
‚îú‚îÄ‚îÄ setups/automator/  # Sistema de automatizaci√≥n de proyectos
‚îú‚îÄ‚îÄ InfiniteAgent/     # Sistema de paralelizaci√≥n y monitor de agentes
‚îú‚îÄ‚îÄ glados-core/       # Core del sistema GLaDOS con modo autom√°tico
‚îú‚îÄ‚îÄ docs/              # Documentaci√≥n general del ecosistema
‚îî‚îÄ‚îÄ mi-proyecto-demo/  # Proyecto demo de ejemplo
```

## üîó Proyectos y Repositorios GitHub

| Proyecto | Ruta Local | GitHub | Descripci√≥n |
|----------|------------|--------|-------------|
| **DiskDominator** | `~/glados/DiskDominator/` | [github.com/oratual/DiskDominator](https://github.com/oratual/DiskDominator) | Aplicaci√≥n Tauri para gesti√≥n de discos |
| **Automator** | `~/glados/setups/automator/` | [github.com/oratual/automator](https://github.com/oratual/automator) | Sistema modular de automatizaci√≥n |
| **MPC** | `~/glados/MPC/` | [github.com/oratual/MPC](https://github.com/oratual/MPC) | Servidores MCP y configuraciones |
| **Scripts** | `~/glados/scripts/` | [github.com/oratual/glados-scripts](https://github.com/oratual/glados-scripts) | Scripts de utilidades |
| **Batman** | `~/glados/batman/` | [github.com/oratual/batman](https://github.com/oratual/batman) | Sistema de automatizaci√≥n nocturna |
| **Mi Proyecto Demo** | `~/glados/mi-proyecto-demo/` | [github.com/oratual/mi-proyecto-demo](https://github.com/oratual/mi-proyecto-demo) | Proyecto demo creado con Automator |

## üöÄ Comandos R√°pidos

```bash
# Men√∫ principal de proyectos
~/glados/scripts/launchers/proyecto-menu-v2.sh

# Batman - Orquestador de tareas
cd ~/glados/batman && python batman.py

# Verificar estado del sistema
~/glados/scripts/connectivity/check-connectivity.sh
```

## üìù Para Crear Nuevos Proyectos

Ver: `~/glados/PROJECT_CREATION.md`

## üîê Seguridad (1Password SSH)

```bash
# Activar entorno 1Password
source ~/1p_env_setup.sh

# Verificar SSH
ssh -T git@github.com
```

**Detalles completos**: Ver `~/glados/SECURITY_AND_TOOLS.md`

## ‚ö†Ô∏è Notas Importantes

- **Protocol**: Siempre iniciar historial en proyectos nuevos
- **Tailscale**: Las IPs son din√°micas, verificar con el script
- **Obsidian Vault**: `/mnt/c/Users/lauta/iCloudDrive/iCloud~md~obsidian/Lautarnauta`

## üéØ Reglas de Trabajo

1. **SIEMPRE** preferir editar sobre crear
2. **USAR** herramientas avanzadas cuando sea apropiado
3. **ACTUALIZAR** historial de proyecto despu√©s de cambios importantes
4. **LIMPIAR** al finalizar cada tarea exitosa confirmada por el usuario:
   - **Papelera**: NO eliminar, mover archivos temporales/pruebas a `~/glados/.papelera/[nombre-proyecto]/[YY-MM-DD]/`
   - Crear estructura: `mkdir -p ~/glados/.papelera/[nombre-proyecto]/$(date +%y-%m-%d)`
   - Mover archivos: test, temporales, logs de debug, configuraciones de prueba
   - Organizar: mover archivos a carpetas apropiadas seg√∫n funci√≥n
   - Optimizar: eliminar c√≥digo comentado, dependencias no usadas, archivos duplicados
   - Verificar: permisos correctos, rutas actualizadas, documentaci√≥n coherente
   - Dejar solo: c√≥digo de producci√≥n, archivos esenciales y documentaci√≥n necesaria
5. **NUNCA** mover proyectos de su ubicaci√≥n original sin petici√≥n expl√≠cita del usuario
6. **SIEMPRE** hacer "üíæ Salvar Proyecto en GitHub" antes de comenzar una sesi√≥n de mejora

## üíæ Salvar Proyecto en GitHub

Cuando el usuario diga "salva el proyecto" (o similar), ejecutar estos comandos:

```bash
# 1. A√±adir todos los archivos al staging area
git add .

# 2. Crear el commit (snapshot) con un mensaje descriptivo
git commit -m "Descripci√≥n de los cambios realizados"

# 3. Enviar los cambios
git push origin main
```

**Nota**: Asegurarse de que el mensaje del commit sea descriptivo y refleje los cambios reales realizados.

## üìã PLAN MODE - Modo de Planificaci√≥n Estricto

### Activaci√≥n
- Se activa cuando un mensaje comienza con `plan:`
- Permanece activo hasta que el usuario escriba **EXACTAMENTE**: `ejecuta el plan`

### Comportamiento en Plan Mode

#### ‚úÖ PERMITIDO (solo herramientas de lectura):
- Read, Grep, Glob, LS
- Task (solo para investigaci√≥n)
- WebSearch, WebFetch
- TodoRead, TodoWrite
- Preguntar y discutir opciones

#### ‚ùå PROHIBIDO (herramientas que modifican):
- Bash (excepto comandos de solo lectura como `ls`, `cat`, etc.)
- Write, Edit, MultiEdit
- NotebookEdit
- Cualquier acci√≥n que modifique archivos o el sistema

### Reglas Cr√≠ticas para --dangerously-skip-permissions

Cuando el usuario trabaja con `--dangerously-skip-permissions`:
1. **NUNCA** interpretar respuestas ambiguas como aprobaci√≥n de ejecuci√≥n
2. **IGNORAR** el bypass de permisos mientras est√© en Plan Mode
3. **NO EJECUTAR** aunque el sistema env√≠e se√±ales autom√°ticas de aprobaci√≥n
4. Las preguntas condicionales ("¬øQuieres que...?") son para PLANIFICAR, no para ejecutar

### Salida del Plan Mode
- **√öNICA** forma de salir: el usuario escribe `ejecuta el plan`
- NO salir con: "s√≠", "ok", "adelante", "hazlo", o cualquier otra variante
- Si hay duda, permanecer en Plan Mode y pedir confirmaci√≥n expl√≠cita

### Ejemplo de flujo:
```
Usuario: plan: necesito organizar mis scripts
Claude: [Plan Mode ACTIVADO] Voy a investigar la estructura actual...
Usuario: s√≠, mira qu√© hay
Claude: [Sigue en Plan Mode, solo investiga]
Usuario: ejecuta el plan
Claude: [Plan Mode DESACTIVADO] Procediendo con la reorganizaci√≥n...
```