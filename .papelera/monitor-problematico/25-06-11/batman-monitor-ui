#!/usr/bin/env python3
"""
Batman Monitor UI - Dashboard hermoso para monitorear agentes
Interfaz moderna con Rich y Textual
"""

import asyncio
import time
import subprocess
import json
import os
import sys
from pathlib import Path
from datetime import datetime, timedelta
import psutil

from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical
from textual.widgets import Header, Footer, Static, DataTable, Log, ProgressBar
from textual.reactive import reactive
from textual import work
from rich.text import Text
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.console import Console
from rich.markdown import Markdown

class AgentCard(Static):
    """Card para mostrar informaci√≥n de un agente."""
    
    def __init__(self, agent_data=None):
        super().__init__()
        self.agent_data = agent_data or {}
    
    def compose(self) -> ComposeResult:
        agent_type = self.agent_data.get('type', 'unknown')
        emoji = self.agent_data.get('emoji', 'ü§ñ')
        
        table = Table.grid(padding=1)
        table.add_column(justify="left")
        table.add_column(justify="right")
        
        table.add_row(f"{emoji} {agent_type.title()}", f"PID: {self.agent_data.get('pid', 'N/A')}")
        table.add_row(f"Started: {self.agent_data.get('started', 'Unknown')}", "")
        table.add_row(f"CPU: {self.agent_data.get('cpu', 0):.1f}%", f"RAM: {self.agent_data.get('memory', 0):.1f}%")
        
        status = self.agent_data.get('status', 'unknown')
        status_color = "green" if status == "working" else "yellow" if status == "idle" else "red"
        table.add_row(Text(f"Status: {status}", style=status_color), "")
        
        yield Static(table)

class SystemStats(Static):
    """Widget para mostrar estad√≠sticas del sistema."""
    
    def __init__(self):
        super().__init__()
        self.stats = {}
    
    def update_stats(self, stats):
        self.stats = stats
        self.refresh()
    
    def render(self):
        table = Table.grid(padding=1)
        table.add_column("Metric", style="bold cyan")
        table.add_column("Value", justify="right")
        table.add_column("Bar", width=20)
        
        # CPU
        cpu = self.stats.get('cpu', 0)
        cpu_color = "green" if cpu < 70 else "yellow" if cpu < 90 else "red"
        cpu_bar = "‚ñà" * int(cpu/5) + "‚ñë" * (20 - int(cpu/5))
        table.add_row("CPU", f"{cpu:.1f}%", Text(cpu_bar, style=cpu_color))
        
        # Memory
        mem = self.stats.get('memory', 0)
        mem_color = "green" if mem < 70 else "yellow" if mem < 90 else "red"
        mem_bar = "‚ñà" * int(mem/5) + "‚ñë" * (20 - int(mem/5))
        table.add_row("Memory", f"{mem:.1f}%", Text(mem_bar, style=mem_color))
        
        # Claude instances
        instances = self.stats.get('claude_instances', 0)
        table.add_row("Claude Instances", str(instances), Text("ü§ñ" * min(instances, 10), style="blue"))
        
        # Load
        load = self.stats.get('load', 0)
        table.add_row("Load Average", f"{load:.2f}", "")
        
        return Panel(table, title="üñ•Ô∏è System Stats", border_style="blue")

class FileActivity(Static):
    """Widget para mostrar actividad de archivos."""
    
    def __init__(self):
        super().__init__()
        self.files = []
    
    def update_files(self, files):
        self.files = files
        self.refresh()
    
    def render(self):
        table = Table()
        table.add_column("Time", style="cyan", width=8)
        table.add_column("File", style="white")
        table.add_column("Size", justify="right", style="blue", width=8)
        
        for file_info in self.files[:10]:
            table.add_row(
                file_info['time'],
                file_info['path'][:50],
                f"{file_info['size']}b"
            )
        
        return Panel(table, title="üìÅ Recent Files", border_style="green")

class BatmanMonitorApp(App):
    """Aplicaci√≥n principal del monitor."""
    
    CSS = """
    .agent-grid {
        layout: grid;
        grid-size: 3 2;
        grid-gutter: 1 1;
        margin: 1;
    }
    
    .stats-container {
        height: 12;
        margin: 1;
    }
    
    .files-container {
        height: 15;
        margin: 1;
    }
    
    .header-text {
        text-align: center;
        color: cyan;
        text-style: bold;
    }
    """
    
    TITLE = "ü¶á Batman Incorporated Monitor"
    
    agents_data = reactive({})
    system_stats = reactive({})
    recent_files = reactive([])
    
    def compose(self) -> ComposeResult:
        yield Header()
        
        with Container():
            # T√≠tulo principal
            yield Static(
                Text("ü¶á BATMAN INCORPORATED - LIVE MONITOR", style="bold cyan", justify="center"),
                classes="header-text"
            )
            
            # Grid de agentes
            with Container(classes="agent-grid"):
                for i in range(6):  # Espacios para hasta 6 agentes
                    yield AgentCard()
            
            # Estad√≠sticas del sistema
            with Container(classes="stats-container"):
                yield SystemStats()
            
            # Actividad de archivos
            with Container(classes="files-container"):
                yield FileActivity()
        
        yield Footer()
    
    def on_mount(self) -> None:
        """Cuando se monta la app, iniciar actualizaciones."""
        self.set_interval(2.0, self.update_data)
        self.update_data()
    
    @work(exclusive=True)
    async def update_data(self) -> None:
        """Actualiza todos los datos."""
        # Agentes
        self.agents_data = await self.scan_claude_processes()
        
        # Sistema
        self.system_stats = await self.get_system_stats()
        
        # Archivos
        self.recent_files = await self.get_recent_files()
        
        # Actualizar widgets
        self.update_widgets()
    
    async def scan_claude_processes(self):
        """Escanea procesos de Claude activos."""
        agents = {}
        agent_patterns = {
            'alfred': 'üßô',
            'robin': 'üê¶', 
            'oracle': 'üëÅÔ∏è',
            'batgirl': 'ü¶π‚Äç‚ôÄÔ∏è',
            'lucius': 'ü¶ä',
            'batman': 'ü¶á'
        }
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time', 'cpu_percent', 'memory_percent']):
                if proc.info['name'] == 'claude':
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    # Detectar tipo de agente
                    agent_type = 'unknown'
                    for agent, emoji in agent_patterns.items():
                        if agent in cmdline.lower():
                            agent_type = agent
                            break
                    
                    agents[proc.info['pid']] = {
                        'type': agent_type,
                        'emoji': agent_patterns.get(agent_type, 'ü§ñ'),
                        'pid': proc.info['pid'],
                        'started': datetime.fromtimestamp(proc.info['create_time']).strftime('%H:%M:%S'),
                        'cpu': proc.info['cpu_percent'] or 0,
                        'memory': proc.info['memory_percent'] or 0,
                        'status': 'working'
                    }
        except Exception as e:
            pass
        
        return agents
    
    async def get_system_stats(self):
        """Obtiene estad√≠sticas del sistema."""
        return {
            'cpu': psutil.cpu_percent(interval=0.1),
            'memory': psutil.virtual_memory().percent,
            'disk': psutil.disk_usage('/').percent,
            'claude_instances': len([p for p in psutil.process_iter() if p.name() == 'claude']),
            'load': os.getloadavg()[0] if hasattr(os, 'getloadavg') else 0
        }
    
    async def get_recent_files(self):
        """Obtiene archivos modificados recientemente."""
        try:
            result = subprocess.run([
                'find', '.', '-type', 'f', 
                '(', '-name', '*.py', '-o', '-name', '*.md', '-o', '-name', '*.yml', '-o', '-name', '*.js', ')',
                '-mmin', '-10'
            ], capture_output=True, text=True, cwd='/home/lauta/glados/batman-incorporated')
            
            files = []
            for line in result.stdout.strip().split('\n'):
                if line and 'venv' not in line and '__pycache__' not in line:
                    try:
                        file_path = f'/home/lauta/glados/batman-incorporated/{line[2:]}'
                        stat = os.stat(file_path)
                        files.append({
                            'path': line[2:],
                            'time': datetime.fromtimestamp(stat.st_mtime).strftime('%H:%M:%S'),
                            'size': stat.st_size
                        })
                    except:
                        pass
            
            return sorted(files, key=lambda x: x['time'], reverse=True)[:15]
        except:
            return []
    
    def update_widgets(self):
        """Actualiza los widgets con los nuevos datos."""
        # Actualizar cards de agentes
        agent_cards = self.query(AgentCard)
        agents_list = list(self.agents_data.values())
        
        for i, card in enumerate(agent_cards):
            if i < len(agents_list):
                card.agent_data = agents_list[i]
                card.refresh()
            else:
                card.agent_data = {}
                card.refresh()
        
        # Actualizar stats del sistema
        stats_widget = self.query_one(SystemStats)
        stats_widget.update_stats(self.system_stats)
        
        # Actualizar archivos
        files_widget = self.query_one(FileActivity)
        files_widget.update_files(self.recent_files)

def main():
    """Funci√≥n principal."""
    if len(sys.argv) > 1 and sys.argv[1] == '--simple':
        # Modo simple sin UI
        print("ü¶á Batman Monitor - Modo Simple")
        print("=" * 40)
        
        while True:
            try:
                agents = {}
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                    if proc.info['name'] == 'claude':
                        agents[proc.info['pid']] = proc.info
                
                print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} - {len(agents)} agentes activos")
                for pid, info in agents.items():
                    print(f"  ü§ñ PID:{pid} CPU:{info['cpu_percent']:.1f}% RAM:{info['memory_percent']:.1f}%")
                
                time.sleep(5)
            except KeyboardInterrupt:
                print("\nüëã Monitor detenido")
                break
    else:
        # Modo UI completo
        app = BatmanMonitorApp()
        app.run()

if __name__ == "__main__":
    main()