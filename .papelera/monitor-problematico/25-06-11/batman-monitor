#!/usr/bin/env python3
"""
Batman Monitor - Dashboard unificado para monitorear todos los agentes
Muestra en una sola ventana: procesos, logs, progreso, recursos
"""

import curses
import time
import subprocess
import json
import os
import sys
from pathlib import Path
from datetime import datetime
from threading import Thread, Lock
import psutil

class BatmanMonitor:
    def __init__(self):
        self.running = True
        self.agents_data = {}
        self.logs_data = {}
        self.system_stats = {}
        self.data_lock = Lock()
        
        # Detectar agentes conocidos
        self.agent_patterns = {
            'alfred': 'üßô',
            'robin': 'üê¶', 
            'oracle': 'üëÅÔ∏è',
            'batgirl': 'ü¶π‚Äç‚ôÄÔ∏è',
            'lucius': 'ü¶ä',
            'batman': 'ü¶á'
        }
        
    def scan_claude_processes(self):
        """Escanea procesos de Claude activos."""
        agents = {}
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time', 'cpu_percent', 'memory_percent']):
                if proc.info['name'] == 'claude':
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    # Detectar tipo de agente por cmdline o PID
                    agent_type = 'unknown'
                    for agent, emoji in self.agent_patterns.items():
                        if agent in cmdline.lower():
                            agent_type = agent
                            break
                    
                    agents[proc.info['pid']] = {
                        'type': agent_type,
                        'emoji': self.agent_patterns.get(agent_type, 'ü§ñ'),
                        'pid': proc.info['pid'],
                        'started': datetime.fromtimestamp(proc.info['create_time']).strftime('%H:%M:%S'),
                        'cpu': proc.info['cpu_percent'],
                        'memory': proc.info['memory_percent'],
                        'status': 'working'
                    }
        except Exception as e:
            pass
        return agents
    
    def get_recent_files(self):
        """Obtiene archivos modificados recientemente."""
        try:
            result = subprocess.run([
                'find', '.', '-type', 'f', 
                '(', '-name', '*.py', '-o', '-name', '*.md', '-o', '-name', '*.yml', '-o', '-name', '*.js', ')',
                '-mmin', '-10'
            ], capture_output=True, text=True, cwd='/home/lauta/glados/batman-incorporated')
            
            files = []
            for line in result.stdout.strip().split('\n'):
                if line and not 'venv' in line and not '__pycache__' in line:
                    try:
                        stat = os.stat(f'/home/lauta/glados/batman-incorporated/{line[2:]}')
                        files.append({
                            'path': line[2:],
                            'time': datetime.fromtimestamp(stat.st_mtime).strftime('%H:%M:%S'),
                            'size': stat.st_size
                        })
                    except:
                        pass
            
            return sorted(files, key=lambda x: x['time'], reverse=True)[:10]
        except:
            return []
    
    def get_system_stats(self):
        """Obtiene estad√≠sticas del sistema."""
        return {
            'cpu': psutil.cpu_percent(interval=1),
            'memory': psutil.virtual_memory().percent,
            'disk': psutil.disk_usage('/').percent,
            'claude_instances': len([p for p in psutil.process_iter() if p.name() == 'claude']),
            'load': os.getloadavg()[0] if hasattr(os, 'getloadavg') else 0
        }
    
    def update_data(self):
        """Actualiza todos los datos en background."""
        while self.running:
            try:
                with self.data_lock:
                    self.agents_data = self.scan_claude_processes()
                    self.recent_files = self.get_recent_files()
                    self.system_stats = self.get_system_stats()
                time.sleep(2)
            except Exception as e:
                time.sleep(5)
    
    def draw_header(self, stdscr, width):
        """Dibuja el header principal."""
        header = "ü¶á BATMAN INCORPORATED - LIVE MONITOR"
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        stdscr.addstr(0, (width - len(header)) // 2, header, curses.A_BOLD | curses.color_pair(1))
        stdscr.addstr(1, width - len(timestamp) - 2, timestamp, curses.color_pair(3))
        
        # L√≠nea separadora
        stdscr.addstr(2, 0, "‚ïê" * width, curses.color_pair(1))
    
    def draw_agents_panel(self, stdscr, start_row, width):
        """Dibuja el panel de agentes."""
        stdscr.addstr(start_row, 2, "üë• AGENTES ACTIVOS", curses.A_BOLD | curses.color_pair(2))
        
        row = start_row + 2
        if not self.agents_data:
            stdscr.addstr(row, 4, "No hay agentes activos", curses.color_pair(6))
            return row + 2
        
        # Headers
        stdscr.addstr(row, 4, "Agent", curses.A_BOLD)
        stdscr.addstr(row, 15, "PID", curses.A_BOLD)
        stdscr.addstr(row, 25, "Started", curses.A_BOLD)
        stdscr.addstr(row, 35, "CPU%", curses.A_BOLD)
        stdscr.addstr(row, 45, "MEM%", curses.A_BOLD)
        stdscr.addstr(row, 55, "Status", curses.A_BOLD)
        row += 1
        
        for pid, agent in self.agents_data.items():
            color = curses.color_pair(4) if agent['status'] == 'working' else curses.color_pair(6)
            stdscr.addstr(row, 4, f"{agent['emoji']} {agent['type']}", color)
            stdscr.addstr(row, 15, str(agent['pid']), color)
            stdscr.addstr(row, 25, agent['started'], color)
            stdscr.addstr(row, 35, f"{agent['cpu']:.1f}", color)
            stdscr.addstr(row, 45, f"{agent['memory']:.1f}", color)
            stdscr.addstr(row, 55, agent['status'], color)
            row += 1
        
        return row + 1
    
    def draw_files_panel(self, stdscr, start_row, width):
        """Dibuja el panel de archivos recientes."""
        stdscr.addstr(start_row, 2, "üìÅ ARCHIVOS MODIFICADOS (√∫ltimos 10min)", curses.A_BOLD | curses.color_pair(2))
        
        row = start_row + 2
        if not hasattr(self, 'recent_files') or not self.recent_files:
            stdscr.addstr(row, 4, "No hay cambios recientes", curses.color_pair(6))
            return row + 2
        
        for file_info in self.recent_files[:8]:  # Mostrar m√°ximo 8
            stdscr.addstr(row, 4, f"[{file_info['time']}]", curses.color_pair(3))
            stdscr.addstr(row, 14, file_info['path'][:50], curses.color_pair(4))
            stdscr.addstr(row, 66, f"({file_info['size']}b)", curses.color_pair(6))
            row += 1
        
        return row + 1
    
    def draw_system_panel(self, stdscr, start_row, width):
        """Dibuja el panel de sistema."""
        stdscr.addstr(start_row, 2, "üìä SISTEMA", curses.A_BOLD | curses.color_pair(2))
        
        row = start_row + 2
        
        # CPU
        cpu = self.system_stats.get('cpu', 0)
        cpu_color = curses.color_pair(4) if cpu < 80 else curses.color_pair(5)
        stdscr.addstr(row, 4, f"CPU: {cpu:.1f}%", cpu_color)
        
        # Memory
        mem = self.system_stats.get('memory', 0)
        mem_color = curses.color_pair(4) if mem < 80 else curses.color_pair(5)
        stdscr.addstr(row, 20, f"RAM: {mem:.1f}%", mem_color)
        
        # Claude instances
        instances = self.system_stats.get('claude_instances', 0)
        stdscr.addstr(row, 36, f"Claude: {instances}", curses.color_pair(4))
        
        # Load
        load = self.system_stats.get('load', 0)
        stdscr.addstr(row, 50, f"Load: {load:.2f}", curses.color_pair(4))
        
        return row + 2
    
    def draw_controls(self, stdscr, height, width):
        """Dibuja los controles en la parte inferior."""
        controls = "[Q]uit | [R]efresh | [L]ogs | [C]lear"
        stdscr.addstr(height-2, 2, controls, curses.color_pair(3))
        
        status = f"Actualizaci√≥n autom√°tica cada 2s"
        stdscr.addstr(height-2, width - len(status) - 2, status, curses.color_pair(6))
    
    def main(self, stdscr):
        """Loop principal del monitor."""
        # Configurar curses
        curses.curs_set(0)  # Ocultar cursor
        stdscr.nodelay(1)   # No bloquear en getch()
        stdscr.timeout(100) # Timeout de 100ms
        
        # Configurar colores
        curses.start_color()
        curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)    # Header
        curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)   # T√≠tulos
        curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)  # Info
        curses.init_pair(4, curses.COLOR_WHITE, curses.COLOR_BLACK)   # Normal
        curses.init_pair(5, curses.COLOR_RED, curses.COLOR_BLACK)     # Alert
        curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_BLACK)    # Secundario
        
        # Iniciar thread de actualizaci√≥n
        update_thread = Thread(target=self.update_data, daemon=True)
        update_thread.start()
        
        while self.running:
            try:
                height, width = stdscr.getmaxyx()
                stdscr.clear()
                
                with self.data_lock:
                    # Header
                    self.draw_header(stdscr, width)
                    
                    # Paneles
                    row = 4
                    row = self.draw_agents_panel(stdscr, row, width)
                    row = self.draw_system_panel(stdscr, row, width)
                    row = self.draw_files_panel(stdscr, row, width)
                    
                    # Controles
                    self.draw_controls(stdscr, height, width)
                
                stdscr.refresh()
                
                # Manejar input
                key = stdscr.getch()
                if key == ord('q') or key == ord('Q'):
                    self.running = False
                elif key == ord('r') or key == ord('R'):
                    stdscr.clear()
                elif key == ord('c') or key == ord('C'):
                    stdscr.clear()
                
                time.sleep(0.1)
                
            except KeyboardInterrupt:
                self.running = False
            except Exception as e:
                # En caso de error, continuar
                time.sleep(1)

def main():
    if len(sys.argv) > 1 and sys.argv[1] == '--simple':
        # Modo simple sin curses
        monitor = BatmanMonitor()
        try:
            while True:
                agents = monitor.scan_claude_processes()
                print(f"\nü¶á Batman Monitor - {datetime.now().strftime('%H:%M:%S')}")
                print("=" * 50)
                if agents:
                    for pid, agent in agents.items():
                        print(f"{agent['emoji']} {agent['type']:10} PID:{pid:6} CPU:{agent['cpu']:4.1f}% MEM:{agent['memory']:4.1f}%")
                else:
                    print("No hay agentes activos")
                time.sleep(5)
        except KeyboardInterrupt:
            print("\nüëã Monitor detenido")
    else:
        # Modo completo con curses
        try:
            monitor = BatmanMonitor()
            curses.wrapper(monitor.main)
        except Exception as e:
            print(f"Error iniciando monitor: {e}")
            print("Usa 'batman-monitor --simple' para modo b√°sico")

if __name__ == "__main__":
    main()