name: Batman Incorporated CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
          
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy bandit safety
        
    - name: Run Black formatter check
      run: black --check --diff src/ tests/ batman.py
      
    - name: Run Ruff linter
      run: ruff check src/ tests/ batman.py
      
    - name: Run MyPy type checker
      run: mypy src/ batman.py --ignore-missing-imports || true
      
    - name: Run Bandit security linter
      run: bandit -r src/ -ll
      
    - name: Check dependency vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-py${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist  # for parallel test execution
        
    - name: Create test configuration
      run: |
        mkdir -p ~/.glados/batman-incorporated
        cp config/default_config.yaml ~/.glados/batman-incorporated/config.yaml
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short -n auto \
          --cov=src --cov-report=xml --cov-report=term \
          -m "not integration and not slow"
          
    - name: Run integration tests
      run: |
        pytest tests/ -v --tb=short \
          -m "integration and not slow" || true
          
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-py${{ matrix.python-version }}
      if: matrix.python-version == env.PYTHON_VERSION

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version generation
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel build
        
    - name: Generate version
      id: version
      run: |
        VERSION=$(git describe --tags --always --dirty)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "$VERSION" > VERSION
        
    - name: Build distribution packages
      run: |
        python -m build
        
    - name: Create deployment package
      run: |
        ./deploy.sh build || echo "No deploy.sh found"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: batman-incorporated-${{ steps.version.outputs.VERSION }}
        path: |
          dist/
          VERSION
          batman-incorporated-*.tar.gz
        retention-days: 30

  docker:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: Check documentation builds
      run: |
        cd docs/
        sphinx-build -b html . _build/html -W --keep-going || true
        
    - name: Check README links
      run: |
        pip install markdown-link-check
        find . -name "*.md" -exec markdown-link-check {} \; || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: CI Status Notification
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    
    steps:
    - name: Check job statuses
      id: status
      run: |
        if [ "${{ needs.lint.result }}" == "success" ] && \
           [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.build.result }}" == "success" ]; then
          echo "STATUS=success" >> $GITHUB_OUTPUT
          echo "EMOJI=✅" >> $GITHUB_OUTPUT
        else
          echo "STATUS=failure" >> $GITHUB_OUTPUT
          echo "EMOJI=❌" >> $GITHUB_OUTPUT
        fi
        
    - name: Send notification
      if: github.event_name == 'push'
      run: |
        echo "${{ steps.status.outputs.EMOJI }} Batman Incorporated CI: ${{ steps.status.outputs.STATUS }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"