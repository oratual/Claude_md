"""
Redundant Mode - M√∫ltiples implementaciones para elegir la mejor.
Ideal para features cr√≠ticas donde necesitamos la mejor soluci√≥n.
"""

from typing import List, Dict, Any, Optional
from pathlib import Path
import tempfile
import shutil

from .base import ExecutionMode
from core.task import Task


class RedundantMode(ExecutionMode):
    """
    Modo Redundante: Genera m√∫ltiples implementaciones de la misma tarea.
    Permite comparar y elegir la mejor soluci√≥n.
    Ideal para features cr√≠ticas como autenticaci√≥n o pagos.
    """
    
    def __init__(self, config: Dict[str, Any], logger=None):
        super().__init__("Redundant Mode", config, logger)
        self.implementations: Dict[str, List[Path]] = {}
        self.results_dir = Path(self.config.get('results_dir', '/tmp/batman-redundant'))
        self.min_implementations = self.config.get('min_implementations', 2)
        self.max_implementations = self.config.get('max_implementations', 5)
        
    def prepare(self, tasks: List[Task]) -> bool:
        """Prepara directorios para m√∫ltiples implementaciones."""
        self._log("üéØ Preparando modo REDUNDANTE")
        
        # Crear directorio para resultados
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
        # Preparar estructura para cada tarea
        for task in tasks:
            task_dir = self.results_dir / f"task_{task.id}"
            task_dir.mkdir(exist_ok=True)
            self.implementations[task.id] = []
            
        self._log(f"  üìÅ Directorio de resultados: {self.results_dir}")
        self._log(f"  üî¢ Implementaciones por tarea: {self.min_implementations}-{self.max_implementations}")
        
        return True
    
    def execute(self, task: Task, agent: Any) -> bool:
        """Ejecuta m√∫ltiples versiones de la misma tarea."""
        self._log(f"üéØ Generando m√∫ltiples implementaciones para: {task.title}")
        
        # Determinar n√∫mero de implementaciones basado en prioridad
        num_implementations = self._determine_implementations(task)
        
        successes = 0
        task_dir = self.results_dir / f"task_{task.id}"
        
        for i in range(num_implementations):
            self._log(f"  üîÑ Implementaci√≥n {i+1}/{num_implementations}")
            
            # Crear directorio para esta implementaci√≥n
            impl_dir = task_dir / f"implementation_{i+1}"
            impl_dir.mkdir(exist_ok=True)
            
            # Copiar archivos base si es necesario
            if i == 0 and self.config.get('copy_base_files', True):
                self._copy_base_files(impl_dir)
            
            # Modificar prompt para generar variaci√≥n
            varied_task = self._create_task_variation(task, i)
            
            # Cambiar directorio de trabajo temporalmente
            original_dir = agent.working_dir
            agent.working_dir = impl_dir
            
            try:
                # Ejecutar tarea
                success = agent.execute_task(varied_task)
                
                if success:
                    successes += 1
                    self.implementations[task.id].append(impl_dir)
                    self._log(f"    ‚úÖ Implementaci√≥n {i+1} completada")
                else:
                    self._log(f"    ‚ùå Implementaci√≥n {i+1} fall√≥")
                    
            finally:
                agent.working_dir = original_dir
        
        # Considerar exitoso si al menos una implementaci√≥n funcion√≥
        success = successes > 0
        
        if success:
            self._log(f"  üìä Completadas {successes}/{num_implementations} implementaciones")
            self._log(f"  üìÅ Revisar resultados en: {task_dir}")
        
        return success
    
    def _determine_implementations(self, task: Task) -> int:
        """Determina n√∫mero de implementaciones basado en la tarea."""
        # M√°s implementaciones para tareas cr√≠ticas
        if task.priority.value >= 4:  # HIGH o CRITICAL
            return self.max_implementations
        elif task.priority.value >= 3:  # MEDIUM
            return (self.min_implementations + self.max_implementations) // 2
        else:
            return self.min_implementations
    
    def _create_task_variation(self, task: Task, variation_index: int) -> Task:
        """Crea una variaci√≥n de la tarea para generar diferentes enfoques."""
        import copy
        
        varied = copy.deepcopy(task)
        
        # A√±adir instrucciones de variaci√≥n al descripci√≥n
        variations = [
            "Implementa esto priorizando simplicidad y claridad",
            "Implementa esto priorizando rendimiento y eficiencia",
            "Implementa esto priorizando seguridad y validaci√≥n exhaustiva",
            "Implementa esto usando las mejores pr√°cticas m√°s modernas",
            "Implementa esto pensando en escalabilidad y mantenibilidad"
        ]
        
        if variation_index < len(variations):
            varied.description = f"{task.description}\n\nEnfoque: {variations[variation_index]}"
        
        return varied
    
    def _copy_base_files(self, dest_dir: Path):
        """Copia archivos base del proyecto al directorio de implementaci√≥n."""
        # Lista de archivos/patrones comunes a copiar
        patterns = [
            "package.json",
            "requirements.txt",
            "tsconfig.json",
            ".gitignore",
            "README.md"
        ]
        
        for pattern in patterns:
            for file in self.working_dir.glob(pattern):
                if file.is_file():
                    shutil.copy2(file, dest_dir)
    
    def cleanup(self) -> bool:
        """Proceso de selecci√≥n y merge de la mejor implementaci√≥n."""
        self._log("üèÜ Proceso de selecci√≥n de implementaci√≥n")
        
        for task_id, impl_dirs in self.implementations.items():
            if not impl_dirs:
                continue
                
            self._log(f"\n  üìã Tarea {task_id}:")
            self._log(f"  Implementaciones disponibles: {len(impl_dirs)}")
            
            # An√°lisis autom√°tico b√°sico
            self._analyze_implementations(task_id, impl_dirs)
            
            # Por ahora, informar al usuario para selecci√≥n manual
            self._log("\n  ü§î Revisa las implementaciones y elige la mejor:")
            for i, impl_dir in enumerate(impl_dirs, 1):
                self._log(f"    {i}. {impl_dir}")
            
            self._log("\n  üìù Para aplicar una implementaci√≥n:")
            self._log(f"     cp -r {impl_dirs[0]}/* .")
        
        return True
    
    def _analyze_implementations(self, task_id: str, impl_dirs: List[Path]):
        """Analiza y compara implementaciones."""
        self._log("  üìä An√°lisis autom√°tico:")
        
        for i, impl_dir in enumerate(impl_dirs, 1):
            self._log(f"\n    Implementaci√≥n {i}:")
            
            # Contar archivos
            files = list(impl_dir.rglob("*"))
            file_count = sum(1 for f in files if f.is_file())
            self._log(f"      Archivos: {file_count}")
            
            # Tama√±o total
            total_size = sum(f.stat().st_size for f in files if f.is_file())
            self._log(f"      Tama√±o: {total_size / 1024:.1f} KB")
            
            # Buscar tests
            test_files = [f for f in files if 'test' in f.name.lower()]
            self._log(f"      Tests: {len(test_files)}")
    
    def can_parallelize(self) -> bool:
        """Redundant mode puede paralelizar las implementaciones."""
        return True
    
    def max_parallel_tasks(self) -> int:
        """Limitado por configuraci√≥n."""
        return self.config.get('max_parallel', 3)