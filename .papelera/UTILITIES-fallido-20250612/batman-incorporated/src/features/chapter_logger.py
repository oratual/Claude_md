#!/usr/bin/env python3
"""
ChapterLogger - Sistema de logging narrativo por cap√≠tulos para GLADOS
Proporciona logs estructurados y legibles que narran el progreso del trabajo autom√°tico
"""

import os
import sys
import json
from datetime import datetime
from typing import Optional, Dict, List, Any
from enum import Enum
from pathlib import Path
import threading
import time


class LogLevel(Enum):
    """Niveles de logging con iconos"""
    INFO = ("‚ÑπÔ∏è", "info")
    SUCCESS = ("‚úÖ", "success") 
    WARNING = ("‚ö†Ô∏è", "warning")
    ERROR = ("‚ùå", "error")
    DEBUG = ("üêõ", "debug")
    PROGRESS = ("‚Üí", "progress")
    DISCOVERY = ("üí°", "discovery")
    ACTION = ("üîß", "action")
    TEST = ("üß™", "test")
    ANALYSIS = ("üîç", "analysis")


class ChapterLogger:
    """Sistema de logging narrativo por cap√≠tulos"""
    
    def __init__(self, session_name: str = "GLADOS Auto Session", 
                 log_dir: str = "~/.glados/logs"):
        self.session_name = session_name
        self.log_dir = Path(log_dir).expanduser()
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # Estado del cap√≠tulo
        self.current_chapter = 0
        self.chapter_start = None
        self.chapter_logs = []
        self.chapter_stats = {}
        
        # Sesi√≥n
        self.session_start = datetime.now()
        self.session_id = self.session_start.strftime("%Y%m%d_%H%M%S")
        self.session_logs = []
        self.chapters_completed = []
        
        # Archivos de log
        self.log_file = self.log_dir / f"session_{self.session_id}.log"
        self.json_file = self.log_dir / f"session_{self.session_id}.json"
        self.current_log_file = self.log_dir / "current.log"
        
        # UI callback para actualizaci√≥n en tiempo real
        self.ui_callback = None
        
        # Iniciar sesi√≥n
        self._init_session()
        
    def _init_session(self):
        """Inicializa una nueva sesi√≥n de logging"""
        header = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    {self.session_name:^40}                     ‚ïë
‚ïë                    Sesi√≥n: {self.session_id}                   ‚ïë
‚ïë                    Inicio: {self.session_start.strftime("%Y-%m-%d %H:%M:%S")}              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        self._write_log(header)
        
    def start_chapter(self, title: str, objective: str, tasks: List[str] = None):
        """Inicia un nuevo cap√≠tulo en el log"""
        # Cerrar cap√≠tulo anterior si existe
        if self.current_chapter > 0:
            self.end_chapter("Cap√≠tulo completado autom√°ticamente")
            
        self.current_chapter += 1
        self.chapter_start = datetime.now()
        self.chapter_logs = []
        self.chapter_stats = {
            'title': title,
            'objective': objective,
            'tasks': tasks or [],
            'completed_tasks': [],
            'warnings': 0,
            'errors': 0,
            'discoveries': 0
        }
        
        # Log del cap√≠tulo
        chapter_header = f"\nüìñ CAP√çTULO {self.current_chapter}: {title.upper()}"
        separator = "‚îÅ" * 60
        
        self.log(chapter_header, direct=True)
        self.log(separator, direct=True)
        self.log(f"üéØ Objetivo: {objective}", level=LogLevel.INFO)
        
        if tasks:
            self.log("üìã Tareas planificadas:", level=LogLevel.INFO)
            for i, task in enumerate(tasks, 1):
                self.log(f"  {i}. {task}", level=LogLevel.INFO)
        
        self.log("")  # L√≠nea en blanco
        
    def log(self, message: str, level: LogLevel = LogLevel.PROGRESS, 
            indent: int = 0, direct: bool = False):
        """Registra un mensaje con el nivel y formato apropiado"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Formato seg√∫n si es directo o con nivel
        if direct:
            formatted = f"[{timestamp}] {message}"
        else:
            icon = level.value[0]
            indent_str = "  " * indent
            formatted = f"[{timestamp}] {icon} {indent_str}{message}"
        
        # Actualizar estad√≠sticas
        if level == LogLevel.WARNING:
            self.chapter_stats['warnings'] += 1
        elif level == LogLevel.ERROR:
            self.chapter_stats['errors'] += 1
        elif level == LogLevel.DISCOVERY:
            self.chapter_stats['discoveries'] += 1
            
        # Guardar en memoria
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'chapter': self.current_chapter,
            'level': level.value[1] if not direct else 'direct',
            'message': message,
            'formatted': formatted
        }
        
        self.chapter_logs.append(log_entry)
        self.session_logs.append(log_entry)
        
        # Escribir a archivo y consola
        self._write_log(formatted)
        print(formatted)
        
        # Callback para UI
        if self.ui_callback:
            self.ui_callback(log_entry)
            
    def log_task_start(self, task_name: str):
        """Registra el inicio de una tarea"""
        self.log(f"üìù Iniciando: {task_name}", level=LogLevel.INFO)
        
    def log_task_complete(self, task_name: str, summary: str = None):
        """Registra la finalizaci√≥n de una tarea"""
        self.chapter_stats['completed_tasks'].append(task_name)
        msg = f"Completado: {task_name}"
        if summary:
            msg += f" - {summary}"
        self.log(msg, level=LogLevel.SUCCESS)
        
    def log_progress(self, message: str, percentage: Optional[int] = None):
        """Registra progreso con barra opcional"""
        if percentage is not None:
            bar_length = 20
            filled = int(bar_length * percentage / 100)
            bar = "‚ñì" * filled + "‚ñë" * (bar_length - filled)
            self.log(f"{message} [{bar}] {percentage}%", level=LogLevel.PROGRESS)
        else:
            self.log(message, level=LogLevel.PROGRESS)
            
    def log_discovery(self, title: str, description: str, severity: str = "info"):
        """Registra un descubrimiento o hallazgo importante"""
        self.log(f"Descubrimiento: {title}", level=LogLevel.DISCOVERY)
        self.log(f"‚îî‚îÄ {description}", level=LogLevel.INFO, indent=1)
        if severity in ["warning", "error"]:
            self.log(f"‚îî‚îÄ Severidad: {severity}", level=LogLevel.WARNING, indent=1)
            
    def log_subtask(self, message: str, parent_indent: int = 0):
        """Registra una subtarea con indentaci√≥n"""
        self.log(f"‚îú‚îÄ {message}", level=LogLevel.PROGRESS, indent=parent_indent + 1)
        
    def log_subtask_complete(self, message: str, parent_indent: int = 0):
        """Registra completaci√≥n de subtarea"""
        self.log(f"‚îî‚îÄ ‚úì {message}", level=LogLevel.SUCCESS, indent=parent_indent + 1)
        
    def end_chapter(self, summary: str):
        """Cierra el cap√≠tulo actual con un resumen"""
        if not self.chapter_start:
            return
            
        duration = datetime.now() - self.chapter_start
        minutes = int(duration.total_seconds() / 60)
        seconds = int(duration.total_seconds() % 60)
        
        self.log("")  # L√≠nea en blanco
        self.log(f"üìä Resumen del Cap√≠tulo {self.current_chapter}:", level=LogLevel.INFO)
        self.log(f"‚îú‚îÄ Duraci√≥n: {minutes}min {seconds}s", level=LogLevel.INFO)
        self.log(f"‚îú‚îÄ Tareas completadas: {len(self.chapter_stats['completed_tasks'])}/{len(self.chapter_stats['tasks'])}", level=LogLevel.INFO)
        
        if self.chapter_stats['discoveries'] > 0:
            self.log(f"‚îú‚îÄ Descubrimientos: {self.chapter_stats['discoveries']}", level=LogLevel.DISCOVERY)
        if self.chapter_stats['warnings'] > 0:
            self.log(f"‚îú‚îÄ Advertencias: {self.chapter_stats['warnings']}", level=LogLevel.WARNING)
        if self.chapter_stats['errors'] > 0:
            self.log(f"‚îú‚îÄ Errores: {self.chapter_stats['errors']}", level=LogLevel.ERROR)
            
        self.log(f"‚îî‚îÄ {summary}", level=LogLevel.SUCCESS)
        self.log("‚îÄ" * 60 + "\n", direct=True)
        
        # Guardar cap√≠tulo completado
        self.chapters_completed.append({
            'number': self.current_chapter,
            'title': self.chapter_stats['title'],
            'duration': str(duration),
            'stats': self.chapter_stats.copy(),
            'logs': self.chapter_logs.copy()
        })
        
        # Guardar estado JSON
        self._save_json_state()
        
    def get_chapter_summary(self) -> Dict[str, Any]:
        """Obtiene un resumen del cap√≠tulo actual"""
        return {
            'number': self.current_chapter,
            'title': self.chapter_stats.get('title', ''),
            'completed_tasks': len(self.chapter_stats.get('completed_tasks', [])),
            'total_tasks': len(self.chapter_stats.get('tasks', [])),
            'warnings': self.chapter_stats.get('warnings', 0),
            'errors': self.chapter_stats.get('errors', 0),
            'discoveries': self.chapter_stats.get('discoveries', 0)
        }
        
    def get_session_summary(self) -> Dict[str, Any]:
        """Obtiene un resumen de toda la sesi√≥n"""
        total_duration = datetime.now() - self.session_start
        
        return {
            'session_id': self.session_id,
            'duration': str(total_duration),
            'chapters_completed': len(self.chapters_completed),
            'total_tasks': sum(len(ch['stats']['completed_tasks']) for ch in self.chapters_completed),
            'total_warnings': sum(ch['stats']['warnings'] for ch in self.chapters_completed),
            'total_errors': sum(ch['stats']['errors'] for ch in self.chapters_completed),
            'total_discoveries': sum(ch['stats']['discoveries'] for ch in self.chapters_completed)
        }
        
    def _write_log(self, message: str):
        """Escribe a los archivos de log"""
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(message + '\n')
            
        # Tambi√©n escribir al log actual para tail -f
        with open(self.current_log_file, 'w', encoding='utf-8') as f:
            # Escribir √∫ltimas 100 l√≠neas
            recent_logs = self.session_logs[-100:]
            for log in recent_logs:
                f.write(log['formatted'] + '\n')
                
    def _save_json_state(self):
        """Guarda el estado completo en formato JSON"""
        state = {
            'session': {
                'id': self.session_id,
                'name': self.session_name,
                'start': self.session_start.isoformat(),
                'current_time': datetime.now().isoformat()
            },
            'current_chapter': self.current_chapter,
            'chapters_completed': self.chapters_completed,
            'summary': self.get_session_summary()
        }
        
        with open(self.json_file, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=2, ensure_ascii=False)
            
    def set_ui_callback(self, callback):
        """Establece un callback para actualizar la UI en tiempo real"""
        self.ui_callback = callback


# Ejemplo de uso
if __name__ == "__main__":
    logger = ChapterLogger("Test Session")
    
    # Cap√≠tulo 1
    logger.start_chapter(
        "Inicializaci√≥n del Sistema",
        "Preparar el entorno y cargar configuraciones",
        ["Cargar configuraci√≥n", "Verificar dependencias", "Conectar servicios"]
    )
    
    logger.log_task_start("Cargar configuraci√≥n")
    logger.log_subtask("Leyendo config.yaml")
    logger.log_subtask_complete("Configuraci√≥n cargada correctamente")
    logger.log_task_complete("Cargar configuraci√≥n", "3 archivos procesados")
    
    logger.log_discovery(
        "Configuraci√≥n desactualizada",
        "El archivo config.yaml usa formato antiguo",
        "warning"
    )
    
    logger.log_progress("Verificando dependencias", 75)
    
    logger.end_chapter("Inicializaci√≥n completada con 1 advertencia")
    
    # Resumen
    print(json.dumps(logger.get_session_summary(), indent=2))