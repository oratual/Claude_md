"""
Fast Mode - Ejecuci√≥n directa sin branches.
R√°pido pero sin protecci√≥n contra conflictos.
"""

from typing import List, Dict, Any
from pathlib import Path

from .base import ExecutionMode
from core.task import Task


class FastMode(ExecutionMode):
    """
    Modo R√°pido: Ejecuta directamente en el directorio actual.
    Sin branches, sin worktrees, m√°xima velocidad.
    Ideal para tareas simples sin conflictos.
    """
    
    def __init__(self, config: Dict[str, Any], logger=None):
        super().__init__("Fast Mode", config, logger)
        self.completed_tasks = []
        
    def prepare(self, tasks: List[Task]) -> bool:
        """Preparaci√≥n m√≠nima para modo r√°pido."""
        self._log("‚ö° Preparando modo R√ÅPIDO (sin branches)")
        
        # Verificar que no haya cambios sin commitear
        success, status, _ = self._run_command("git status --porcelain")
        
        if success and status.strip():
            self._log("‚ö†Ô∏è Hay cambios sin commitear en el repositorio")
            self._log("   Considera hacer commit antes de continuar")
        
        # Guardar estado actual
        self._run_command("git stash create")
        
        return True
    
    def execute(self, task: Task, agent: Any) -> bool:
        """Ejecuta directamente en el directorio actual."""
        self._log(f"‚ö° Ejecutando directamente: {task.title}")
        
        # Ejecutar tarea
        success = agent.execute_task(task)
        
        if success:
            self.completed_tasks.append(task)
            
            # Auto-commit si est√° configurado
            if self.config.get('auto_commit', False):
                self._auto_commit(task, agent.name)
        
        return success
    
    def _auto_commit(self, task: Task, agent_name: str):
        """Hace commit autom√°tico de cambios."""
        # Add cambios
        self._run_command("git add -A")
        
        # Verificar si hay cambios
        success, status, _ = self._run_command("git status --porcelain")
        
        if success and status.strip():
            # Commit
            commit_msg = f"{agent_name}: {task.title} (fast mode)"
            self._run_command(f'git commit -m "{commit_msg}"')
            self._log(f"  üíæ Auto-commit realizado")
    
    def cleanup(self) -> bool:
        """Limpieza m√≠nima para modo r√°pido."""
        self._log("‚úÖ Modo r√°pido completado")
        
        # Resumen de tareas
        self._log(f"  üìä Tareas completadas: {len(self.completed_tasks)}")
        
        # Si no hay auto-commit, recordar al usuario
        if not self.config.get('auto_commit', False):
            success, status, _ = self._run_command("git status --porcelain")
            if success and status.strip():
                self._log("  ‚ö†Ô∏è Hay cambios sin commitear")
                self._log("     Ejecuta: git add . && git commit")
        
        return True
    
    def can_parallelize(self) -> bool:
        """
        Fast mode NO soporta paralelizaci√≥n segura.
        Las tareas se ejecutan secuencialmente.
        """
        return False